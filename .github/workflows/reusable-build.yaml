name: "Build Contracts"

on:
  workflow_call:
    inputs:
      commit-hash:
        description: "The commit hash to build from"
        type: string
        required: true
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact containing all builds"
        value: ${{ jobs.build.outputs.artifact-name }}
      artifact-path:
        description: "Path of the uploaded artifact containing all builds"
        value: ${{ jobs.build.outputs.artifact-path }}

jobs:
  build:
    runs-on: blacksmith-8vcpu-ubuntu-2204
    outputs:
      artifact-name: ${{ steps.set-artifact-name.outputs.name }}
      artifact-path: ${{ steps.set-artifact-name.outputs.path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout specific commit
        run: git checkout ${{ inputs.commit-hash }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0
          targets: wasm32-unknown-unknown

      - name: Set artifact name
        id: set-artifact-name
        run: |
          echo "name=wasm-builds-${{ inputs.commit-hash }}" >> $GITHUB_OUTPUT
          echo "path=target/wasm32-unknown-unknown/release" >> $GITHUB_OUTPUT

      - name: Build all contracts
        run: |
          # Install Stellar CLI compatible with the soroban-sdk version in Cargo.toml
          cargo install --locked stellar-cli --version 22.2.0--features opt

          # Build all contracts
          stellar contract build
          ./optimize.sh

          # Process in the release directory
          cd target/wasm32-unknown-unknown/release

          # Remove unoptimized files and rename optimized ones
          # This ensures we only keep the optimized versions
          find . -type f -name "*.wasm" ! -name "*.optimized.wasm" -maxdepth 1 -delete
          find . -name "*.optimized.wasm" -maxdepth 1 -exec sh -c 'mv "$0" "${0%.optimized.wasm}.wasm"' {} \;
          find . -type f ! -name "*.wasm" -delete

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.name }}
          path: target/wasm32-unknown-unknown/release
          retention-days: 1
