#[contracttype]
enum DataKey {
    Counter,
    Message(Address),
    LastCaller(u64),
    Flag(String, Address),
    OptionalMessage(u32),
    Initialized,
    Paused,
}

pub fn counter(env: &soroban_sdk::Env) -> u32 {
    let value = env.storage().instance().get::<_, u32>(&DataKey::Counter).unwrap();
    stellar_axelar_std::ttl::extend_instance_ttl(env);
    value
}

pub fn try_counter(env: &soroban_sdk::Env) -> Option<u32> {
    let value = env.storage().instance().get::<_, u32>(&DataKey::Counter);
    if value.is_some() {
        stellar_axelar_std::ttl::extend_instance_ttl(env)
    }
    value
}

pub fn set_counter(env: &soroban_sdk::Env, value: &u32) {
    env.storage().instance().set(&DataKey::Counter, value);
    stellar_axelar_std::ttl::extend_instance_ttl(env)
}

pub fn remove_counter(env: &soroban_sdk::Env) {
    env.storage().instance().remove(&DataKey::Counter)
}

pub fn message(env: &soroban_sdk::Env, sender: Address) -> String {
    let value = env
        .storage()
        .persistent()
        .get::<_, String>(&DataKey::Message(sender.clone()))
        .unwrap();
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::Message(sender.clone()),
    );
    value
}

pub fn try_message(env: &soroban_sdk::Env, sender: Address) -> Option<String> {
    let value = env
        .storage()
        .persistent()
        .get::<_, String>(&DataKey::Message(sender.clone()));
    if value.is_some() {
        stellar_axelar_std::ttl::extend_persistent_ttl(
            env,
            &DataKey::Message(sender.clone()),
        )
    }
    value
}

pub fn set_message(env: &soroban_sdk::Env, sender: Address, value: &String) {
    let value = env.storage().persistent().set(&DataKey::Message(sender.clone()), value);
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::Message(sender.clone()),
    );
    value
}

pub fn remove_message(env: &soroban_sdk::Env, sender: Address) {
    env.storage().persistent().remove(&DataKey::Message(sender.clone()))
}

pub fn last_caller(env: &soroban_sdk::Env, timestamp: u64) -> Address {
    env.storage()
        .temporary()
        .get::<_, Address>(&DataKey::LastCaller(timestamp.clone()))
        .unwrap()
}

pub fn try_last_caller(env: &soroban_sdk::Env, timestamp: u64) -> Option<Address> {
    env.storage().temporary().get::<_, Address>(&DataKey::LastCaller(timestamp.clone()))
}

pub fn set_last_caller(env: &soroban_sdk::Env, timestamp: u64, value: &Address) {
    env.storage().temporary().set(&DataKey::LastCaller(timestamp.clone()), value)
}

pub fn remove_last_caller(env: &soroban_sdk::Env, timestamp: u64) {
    env.storage().temporary().remove(&DataKey::LastCaller(timestamp.clone()));
}

pub fn flag(env: &soroban_sdk::Env, key: String, owner: Address) -> bool {
    let value = env
        .storage()
        .persistent()
        .get::<_, bool>(&DataKey::Flag(key.clone(), owner.clone()))
        .unwrap();
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::Flag(key.clone(), owner.clone()),
    );
    value
}

pub fn try_flag(env: &soroban_sdk::Env, key: String, owner: Address) -> Option<bool> {
    let value = env
        .storage()
        .persistent()
        .get::<_, bool>(&DataKey::Flag(key.clone(), owner.clone()));
    if value.is_some() {
        stellar_axelar_std::ttl::extend_persistent_ttl(
            env,
            &DataKey::Flag(key.clone(), owner.clone()),
        )
    }
    value
}

pub fn set_flag(env: &soroban_sdk::Env, key: String, owner: Address, value: &bool) {
    let value = env
        .storage()
        .persistent()
        .set(&DataKey::Flag(key.clone(), owner.clone()), value);
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::Flag(key.clone(), owner.clone()),
    );
    value
}

pub fn remove_flag(env: &soroban_sdk::Env, key: String, owner: Address) {
    env.storage().persistent().remove(&DataKey::Flag(key.clone(), owner.clone()))
}

pub fn optional_message(env: &soroban_sdk::Env, id: u32) -> Option<String> {
    let value = env
        .storage()
        .persistent()
        .get::<_, Option<String>>(&DataKey::OptionalMessage(id.clone()))
        .unwrap();
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::OptionalMessage(id.clone()),
    );
    value
}

pub fn try_optional_message(env: &soroban_sdk::Env, id: u32) -> Option<Option<String>> {
    let value = env
        .storage()
        .persistent()
        .get::<_, Option<String>>(&DataKey::OptionalMessage(id.clone()));
    if value.is_some() {
        stellar_axelar_std::ttl::extend_persistent_ttl(
            env,
            &DataKey::OptionalMessage(id.clone()),
        )
    }
    value
}

pub fn set_optional_message(env: &soroban_sdk::Env, id: u32, value: &Option<String>) {
    let value = env
        .storage()
        .persistent()
        .set(&DataKey::OptionalMessage(id.clone()), value);
    stellar_axelar_std::ttl::extend_persistent_ttl(
        env,
        &DataKey::OptionalMessage(id.clone()),
    );
    value
}

pub fn remove_optional_message(env: &soroban_sdk::Env, id: u32) {
    env.storage().persistent().remove(&DataKey::OptionalMessage(id.clone()))
}

pub fn is_initialized(env: &soroban_sdk::Env) -> bool {
    let value = env.storage().instance().has(&DataKey::Initialized);
    if value {
        stellar_axelar_std::ttl::extend_instance_ttl(env)
    }
    value
}

pub fn set_initialized_status(env: &soroban_sdk::Env) {
    env.storage().instance().set(&DataKey::Initialized, &());
}

pub fn remove_initialized_status(env: &soroban_sdk::Env) {
    env.storage().instance().remove(&DataKey::Initialized);
}

pub fn is_paused(env: &soroban_sdk::Env) -> bool {
    let value = env.storage().persistent().has(&DataKey::Paused);
    if value {
        stellar_axelar_std::ttl::extend_persistent_ttl(env, &DataKey::Paused)
    }
    value
}

pub fn set_paused_status(env: &soroban_sdk::Env) {
    env.storage().persistent().set(&DataKey::Paused, &());
}

pub fn remove_paused_status(env: &soroban_sdk::Env) {
    env.storage().persistent().remove(&DataKey::Paused);
}

#[cfg(test)]
mod data_key_storage_layout_tests {
    use goldie;
    #[test]
    fn ensure_data_key_storage_schema_is_unchanged() {
        goldie::assert!(
            "enum DataKey {\n\n    #[instance]\n    #[value(u32)]\n    Counter,\n\n    #[persistent]\n    #[value(String)]\n    Message { sender: Address },\n\n    #[temporary]\n    #[value(Address)]\n    LastCaller { timestamp: u64 },\n\n    #[persistent]\n    #[value(bool)]\n    Flag { key: String, owner: Address },\n\n    #[persistent]\n    #[value(Option<String>)]\n    OptionalMessage { id: u32 },\n\n    #[instance]\n    #[status]\n    Initialized,\n\n    #[persistent]\n    #[status]\n    Paused,\n}\n"
        );
    }
}
